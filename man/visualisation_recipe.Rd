% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/visualisation_recipe.R,
%   R/visualisation_recipe.estimate_means.R,
%   R/visualisation_recipe.estimate_predicted.R
\name{visualisation_recipe}
\alias{visualisation_recipe}
\alias{visualisation_recipe.estimate_means}
\alias{visualisation_recipe.estimate_predicted}
\title{Prepare objects for visualisation}
\usage{
visualisation_recipe(x, ...)

\method{visualisation_recipe}{estimate_means}(
  x,
  show_data = "points",
  point = NULL,
  jitter = point,
  boxplot = NULL,
  violin = NULL,
  line = NULL,
  pointrange = NULL,
  labs = NULL,
  ...
)

\method{visualisation_recipe}{estimate_predicted}(
  x,
  show_data = "points",
  point = NULL,
  line = NULL,
  ribbon = NULL,
  labs = NULL,
  ...
)
}
\arguments{
\item{x}{An easystats object.}

\item{...}{Other arguments passed to other functions.}

\item{show_data}{Display the "raw" data as a background to the model-based estimation. Can be set to \code{"none"} to remove it. When input is the result of \code{estimate_means}, \code{show_data} can be "points" (the jittered observation points), "boxplot", "violin" a combination of them (see examples). When input is the result of \code{estimate_response} or \code{estimate_expectation}, \code{show_data} can be "points" (the points of the original data corresponding to the x and y axes).}

\item{point, jitter, boxplot, violin, pointrange, line, ribbon, labs}{Additional aesthetics and parameters for the geoms (see customization example).}
}
\description{
THis function prepares some objects for avisualisation by returning a list of layers with data and geoms that can be easily plotted using \code{ggplot2}.
}
\examples{
# ==============================================
# estimate_means
# ==============================================
if(require("see")) {

# Simple Model ---------------
x <- estimate_means(lm(Sepal.Width ~ Species, data = iris))
layers <- visualisation_recipe(x)
layers
plot(layers)

# Customize aesthetics
layers <- visualisation_recipe(x,
                               show_data = c("violin", "boxplot", "points"),
                               jitter = list(width = 0.03, color = "red"),
                               line = list(linetype = "dashed"))
plot(layers)

# Two levels ---------------
data <- mtcars
data$cyl <- as.factor(data$cyl)
data$new_factor <- as.factor(rep(c("A", "B"), length.out = nrow(mtcars)))

model <- lm(mpg ~ new_factor * cyl * wt, data = data)
x <- estimate_means(model, levels = c("new_factor", "cyl"))
plot(visualisation_recipe(x))

# Modulations --------------
x <- estimate_means(model, levels = c("new_factor"), modulate = "wt")
plot(visualisation_recipe(x))

x <- estimate_means(model, levels = c("new_factor", "cyl"), modulate = "wt")
plot(visualisation_recipe(x))

}
# ==============================================
# estimate_expectation, estimate_response, ...
# ==============================================
if(require("see")) {

# Simple Model ---------------
x <- estimate_relation(lm(mpg ~ wt, data = mtcars))
layers <- visualisation_recipe(x)
layers
plot(layers)

# Customize aesthetics
layers <- visualisation_recipe(x,
                               point = list(color = "red", alpha = 0.6, size = 3),
                               line = list(color = "blue", size = 4),
                               ribbon = list(fill = "green", alpha = 0.7),
                               labs = list(subtitle = "Oh yeah!"))
layers
plot(layers)


# 2-ways interaction ------------

# Numeric * numeric
x <- estimate_relation(lm(mpg ~ wt * qsec, data = mtcars))
layers <- visualisation_recipe(x)
plot(layers)

# Factor * numeric
x <- estimate_relation(lm(Sepal.Width ~ Species * Sepal.Length, data = iris))
layers <- visualisation_recipe(x)
plot(layers)


# 3-ways interaction ------------
data <- mtcars
data$vs <- as.factor(data$vs)
data$cyl <- as.factor(data$cyl)
data$new_factor <- as.factor(rep(c("A", "B"), length.out = nrow(mtcars)))

# Numeric * numeric * numeric
x <- estimate_relation(lm(mpg ~ wt * qsec * hp, data = data))
layers <- visualisation_recipe(x)
plot(layers)

# Numeric * numeric * factor
x <- estimate_relation(lm(mpg ~ wt * am * vs, data = data))
layers <- visualisation_recipe(x)
plot(layers)

# Numeric * factor * factor
x <- estimate_relation(lm(mpg ~ wt * cyl * new_factor, data = data))
layers <- visualisation_recipe(x)
plot(layers)
}
}
