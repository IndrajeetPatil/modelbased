% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimate_means.R
\name{estimate_means.stanreg}
\alias{estimate_means.stanreg}
\title{Estimate marginal means}
\usage{
\method{estimate_means}{stanreg}(model, levels = NULL, fixed = NULL,
  modulate = NULL, transform = "response", length = 10,
  centrality = "median", ci = 0.89, ci_method = "hdi", ...)
}
\arguments{
\item{model}{A Bayesian model.}

\item{levels}{A character vector or formula specifying the names of the predictors over which to estimate means or contrasts.}

\item{fixed}{A character vector indicating the names of the predictors to be "fixed" (i.e., maintained), so that the estimation is made at these values.}

\item{modulate}{A character vector indicating the names of a numeric variable along which the means or the contrasts will be estimated. Adjust its length using \code{length}.}

\item{transform}{Can be \code{"none"} (default for contrasts), \code{"response"} (default for means), \code{"mu"}, \code{"unlink"}, \code{"log"}. \code{"none"}  will leave the values on scale of the linear predictors. \code{"response"} will transform them on scale of the response variable. Thus for a logistic model, \code{"none"} will give estimations expressed in log-odds (probabilities on logit scale) and \code{"response"} in terms of probabilities.}

\item{length}{Length of the spread numeric variables.}

\item{centrality}{The point-estimates (centrality indices) to compute.  Character (vector) or list with one or more of these options: \code{"median"}, \code{"mean"}, \code{"MAP"} or \code{"all"}.}

\item{ci}{Confidence Interval (CI) level. Default to 0.95 (95\%).}

\item{ci_method}{The type of index used for Credible Interval. Can be
\code{"hdi"} (default, see \code{\link{hdi}}) or \code{"quantile"}
(see \code{\link{ci}}).}

\item{...}{Arguments passed to or from other methods.}
}
\description{
Estimate marginal means
}
\examples{
library(estimate)
\dontrun{
data <- iris
data$Petal.Length_factor <- ifelse(data$Petal.Length < 4.2, "A", "B")

library(rstanarm)
model <- stan_glm(Sepal.Width ~ Species * Petal.Length_factor, data = data)
estimate_means(model)

model <- stan_glm(vs ~ mpg, data = mtcars)
estimate_means(model)

model <- stan_glm(Petal.Length ~ Sepal.Width + Species, data = iris)
estimate_means(model)
estimate_means(model, modulate = "Sepal.Width")
}
}
